<!-- start Scribite with TinyMCE for {{ modname }} -->
{% set skin = editorVars.theme|default(editorVars.skin) %}
{{ pageAddAsset('javascript', asset('editors/tinymce/tinymce/tinymce.min.js'), 101) }}
{{ pageAddAsset('javascript', asset('editors/tinymce/tinymce/themes/' ~ skin ~ '/theme.min.js'), 102) }}
{{ pageAddAsset('javascript', asset('editors/tinymce/js/TinyMce.ajaxApi.js'), 103) }}
{% if externalEditorPlugins|default %}
    {% for externalPlugin in externalEditorPlugins %}
        {{ pageAddAsset('javascript', asset(externalPlugin.path), 102) }}
    {% endfor %}
{% endif %}
<script type="text/javascript">
/* <![CDATA[ */
    tinyMCE.baseURL = '{{ asset('editors/tinymce/tinymce') }}';
    tinyMCE.suffix = '.min';

    // construct param object for default config of tinymce
    var tinymceParams = {
        mode: 'exact',
        schema: 'html5',
        theme: '{{ skin }}',
        toolbar: [
            '{# code #}styleselect fontselect fontsizeselect | cut copy paste | undo redo',
            'bold italic underline strikethrough removeformat | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent blockquote',
            '{{ editorParameters.buttons|replace({',':' '}) }}{% if externalEditorPlugins|default %}{% for externalPlugin in externalEditorPlugins %} {{ externalPlugin.name }}{% endfor %}{% endif %}'
        ],
        language: '{{ app.request.locale }}',
{% if editorVars.activeplugins|default %}
        plugins: ['{{ editorVars.activeplugins|join(' ') }}{% if externalEditorPlugins|default %}{% for externalPlugin in externalEditorPlugins %} {{ externalPlugin.name }}{% endfor %}{% endif %}'],
{% endif %}
        content_css: '{{ asset(editorVars.style) }}',
        cleanup: true,
        setup: function(ed) {
            ed.on('input', function(ed, e) {
                var id = jQuery(ed.currentTarget).data('id');
                jQuery('#'+id).html(ed.currentTarget.innerHTML);
            });
        },
{% if skin == 'modern' %}
{#
        theme_modern_toolbar_location: 'top',
        theme_modern_toolbar_align: 'left',
        theme_modern_statusbar_location: 'bottom',
        theme_modern_resizing: true,
        // default buttons available in the modern theme
        theme_modern_buttons1: 'bold,italic,underline,strikethrough,justifyleft,justifycenter,justifyright,justifyfull,bullist,numlist,outdent,indent,cut,copy,paste,undo,redo,link,unlink,image,cleanup',
        theme_modern_buttons2: 'code,anchor,fontselect,fontsizeselect,sub,sup,forecolor,backcolor,charmap,visualaid,blockquote,hr,removeformat,help',
        // individual buttons configured in the module's settings
        theme_modern_buttons3: '{% if editorParameters.buttons is not empty %}{{ editorParameters.buttons }}{% endif %}{% if externalEditorPlugins is not empty %}}{{% for externalPlugin in externalEditorPlugins %},{{ externalPlugin.name }}{% endfor %}{% endif %}',
        // TODO: I really would like to split this into multiple row, but I do not know how
        //theme_modern_buttons3 : '{{* foreach from=editorParameters.buttons item='tinymce_button' * }}{{* $timymce_button * }},{{* /foreach * }}',
#}
        // skin options
        skin: 'lightgray',
        plugin_insertdate_dateFormat: '{{ editorVars.dateformat }}',
        plugin_insertdate_timeFormat: '{{ editorVars.timeformat }}',
{% endif %}
        valid_elements: '*[*]',
{% if disallowedHtmlTags|default %}
        invalid_elements: '{{ disallowedHtmlTags|join(',') }}',
{% endif %}
        height: '{{ editorVars.height }}',
        width: '{{ editorVars.width }}',
        relative_urls: false,
        document_base_url: Zikula.Config.baseURL
    };

    var textareaClassnames = {};
    var scribite_init = function () {
        {% if paramOverrides %}
            // configure and init each textarea
            jQuery('textarea').each(function(index) {
                var areaId = jQuery(this).attr('id');
                // ensure textarea not in disabled list or has 'noeditor' class
                if (jQuery.inArray(areaId, disabledTextareas) == -1 && !jQuery('#' + areaId).hasClass('noeditor')) {
                    // generate and add a classname to the textarea and store in object
                    textareaClassnames[areaId] = Scribite.generateString(5);
                    tinymce.dom.addClass(areaId, textareaClassnames[areaId]);
                    var oParams = new Object();
                    tinymce.extend(oParams, tinymceParams);
                    var paramOverrideObj = window['paramOverrides_' + areaId];
                    if (typeof paramOverrideObj != 'undefined') {
                        // override existing values in the `params` obj
                        tinymce.extend(oParams, paramOverrideObj);
                    }
                    if (typeof paramOverrides_all != 'undefined') {
                        // override existing values in if 'all' is set as textarea for override
                        // overrides individual textarea overrides!
                        tinymce.extend(oParams, paramOverrides_all);
                    }
                    oParams.mode = 'textareas';
                    oParams.editor_selector = textareaClassnames[areaId];
                    tinymce.init(oParams);
                    // notify subscriber
                    insertNotifyInput(areaId);
                }
            });
        {% else %}
            // make a list of all textareas except those disabled or excluded and init all of them.
            var assignedTextareasList = '';
            jQuery('textarea').each(function(index) {
                var areaId = jQuery(this).attr('id');
                // ensure textarea not in disabled list or has 'noeditor' class
                if (jQuery.inArray(areaId, disabledTextareas) == -1 && !jQuery('#' + areaId).hasClass('noeditor')) {
                    // add textarea to element list
                    assignedTextareasList += areaId + ',';
                    // notify subscriber
                    insertNotifyInput(areaId);
                }
            });
            // add element list to param object (remove trailing comma)
            tinymceParams.elements = assignedTextareasList.substr(0, assignedTextareasList.length - 1);
            tinymce.init(tinymceParams);
        {% endif %}
    };

    (function($) {
        $(document).ready(function() {
            // instantiate Scribite object for editor creation and ajax manipulation
            Scribite = new ScribiteUtil(tinymceParams);
            Scribite.createEditors();
        });
    })(jQuery)
/* ]]> */
</script>
<!-- end Scribite with TinyMCE for {{ modname }} -->
